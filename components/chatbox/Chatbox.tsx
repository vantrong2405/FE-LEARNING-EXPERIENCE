'use client'

import { useState, useEffect, useRef } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { MessageCircle, Send, X, CircleStop } from 'lucide-react'
import { GoogleGenerativeAI } from '@google/generative-ai'
import configProject from '@/config/configService'
import { Message } from '@/models/chatbox.type'
import { useCourseQuery } from '@/queries/useCourse'
import { pagination } from '@/constants/pagination-config'
import { useCategoryListQuery } from '@/queries/useCategory'
import { useLevelListQuery } from '@/queries/useLevel'
import { randomUUID } from 'crypto'
import Link from 'next/link'

const apiKey = configProject.NEXT_PUBLIC_API_KEY
const genAI = new GoogleGenerativeAI(apiKey)

const model = genAI.getGenerativeModel({
  model: 'gemini-2.0-flash'
})

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: 'text/plain'
}

export default function Chatbox() {
  const courseQuery = useCourseQuery(100, pagination.PAGE)
  const categoryQuery = useCategoryListQuery(100, pagination.PAGE)
  const levelQuery = useLevelListQuery(100, pagination.PAGE)

  const [category, setCategory] = useState<any[]>([])
  const [course, setCourse] = useState<any[]>([])
  const [level, setLevel] = useState<any[]>([])

  useEffect(() => {
    if (categoryQuery.data) {
      setCategory(categoryQuery.data.payload.data.data)
    }
    if (courseQuery.data) {
      setCourse(courseQuery.data.payload.data.data)
    }
    if (levelQuery.data) {
      setLevel(levelQuery.data.payload.data.data)
    }
  }, [categoryQuery.data, courseQuery.data, levelQuery.data])

  const [isOpen, setIsOpen] = useState(false)
  const [input, setInput] = useState('')
  const [messages, setMessages] = useState<Message[]>([])
  const [isLoading, setIsLoading] = useState(false)
  const [displayText, setDisplayText] = useState('')
  const scrollRef = useRef<HTMLDivElement | null>(null)
  const lastMessageRef = useRef<HTMLDivElement>(null)
  const [isRendering, setIsRendering] = useState(false)

  // Typing animation effect
  const typeMessage = async (text: string) => {
    let currentText = ''
    for (let i = 0; i < text.length; i++) {
      currentText += text[i]
      setDisplayText(currentText)
      await new Promise((resolve) => setTimeout(resolve, 30))
    }
    return currentText
  }

  // Function to call the Gemini API and get a response
  const fetchAIResponse = async (userMessage: string) => {
    if (isLoading) return // NgƒÉn ch·∫∑n g·ªçi API n·∫øu ƒëang trong qu√° tr√¨nh g·ªçi

    try {
      setIsLoading(true)
      setIsRendering(true)

      // Th√™m tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
      setMessages((prev) => [...prev, { id: Date.now(), sender: 'user', text: userMessage }])

      // Th√™m tin nh·∫Øn "ƒê·ª£i t√¥i ch√∫t..." ch·ªâ khi c√≥ tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
      setMessages((prev) => [...prev, { id: Date.now() + 1, sender: 'bot', text: 'ƒê·ª£i t√¥i ch√∫t...', data: [] }])

      const chatSession = model.startChat({
        generationConfig,
        history: [
          {
            role: 'user',
            parts: [
              {
                text: `b·∫°n l√† m·ªôt ng∆∞·ªùi t∆∞ v·∫•n gi·ªèi. v·ªõi d·ªØ li·ªáu ƒë∆∞·ª£c l·∫•y t·ª´ database c·ªßa t√¥i: ${JSON.stringify({ course, category, level })}. ng∆∞·ªùi d√πng s·∫Ω h·ªèi nh·ªØng c√¢u nh∆∞ v√≠ d·ª•.. t√¥i mu·ªën h·ªçc l·∫≠p tr√¨nh t·ª´ con s·ªë 0 th√¨ c√≥ kh√≥a n√†o ph√π h·ª£p kh√¥ng? b·∫°n s·∫Ω t∆∞ v·∫•n h·ªç theo ki·ªÉu d·ªÖ th∆∞∆°ng k√®m nghi√™m t√∫c m·ªôt ch√∫t .. v√† ƒë∆∞a l·∫°i ƒë∆∞·ªùng link c·ªßa kh√≥a h·ªçc cho h·ªç.. ƒë∆∞·ªùng link s·∫Ω l√†: http://localhost:3000/dashboard/courses/{id} ( v·ªõi id ƒë∆∞·ª£c l·∫•y t·ª´ trong database ) ... nh∆∞ng c√¢u h·ªèi kh√¥ng li√™n quan b·∫°n s·∫Ω n√≥i xin l·ªói ngo·∫°i ph·∫°m vi tr·∫£ l·ªùi c·ªßa t√¥i r·ªìi t√¥i r·∫•t ti·∫øc ho·∫∑c m·∫•y c√¢u nh·ªè th√¨ v·∫´n tr·∫£ l·ªùi ƒë∆∞·ª£c. n√≥i chung li√™n quan ƒë·∫øn gi√°o d·ª•c th√¨ b·∫°n tr·∫£ l·ªùi gi√∫p t√¥i b·∫°n hi·ªÉu kh√¥ng?`
              }
            ]
          },
          {
            role: 'model',
            parts: [
              {
                text: 'Tuy·ªát v·ªùi! T√¥i hi·ªÉu r√µ y√™u c·∫ßu c·ªßa b·∫°n. T√¥i s·∫Ω ƒë√≥ng vai m·ªôt t∆∞ v·∫•n vi√™n gi√°o d·ª•c "d·ªÖ th∆∞∆°ng nh∆∞ng nghi√™m t√∫c", s·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ database c·ªßa b·∫°n ƒë·ªÉ ƒë∆∞a ra l·ªùi khuy√™n v√† cung c·∫•p ƒë∆∞·ªùng link kh√≥a h·ªçc ph√π h·ª£p. Khi ng∆∞·ªùi d√πng h·ªèi c√°c c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn gi√°o d·ª•c, t√¥i s·∫Ω l·ªãch s·ª± t·ª´ ch·ªëi. V√† quan tr·ªçng nh·∫•t, **t·∫•t c·∫£ c√°c ph·∫£n h·ªìi c·ªßa t√¥i s·∫Ω ·ªü ƒë·ªãnh d·∫°ng JSON, kh√¥ng c√≥ th√™m b·∫•t k·ª≥ text n√†o kh√°c**.\n\nD∆∞·ªõi ƒë√¢y l√† c·∫•u tr√∫c JSON t√¥i s·∫Ω s·ª≠ d·ª•ng:\n\n```json\n{\n  "message": "N·ªôi dung t∆∞ v·∫•n/ph·∫£n h·ªìi",\n  "url": ["http://localhost:3000/dashboard/courses/{id1}", "http://localhost:3000/dashboard/courses/{id2}", ...]\n}\n```\n\n**L∆∞u √Ω:**\n\n*   `message`:  N·ªôi dung t∆∞ v·∫•n, gi·∫£i th√≠ch, ho·∫∑c l·ªùi c·∫£m ∆°n.\n*   `url`: M·ªôt m·∫£ng ch·ª©a c√°c URL c·ªßa kh√≥a h·ªçc li√™n quan ƒë·∫øn c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng. N·∫øu kh√¥ng c√≥ kh√≥a h·ªçc ph√π h·ª£p, m·∫£ng n√†y c√≥ th·ªÉ r·ªóng (`[]`). N·∫øu c√≥ nhi·ªÅu kh√≥a h·ªçc ph√π h·ª£p, s·∫Ω c√≥ nhi·ªÅu URL trong m·∫£ng.\n\n**V√≠ d·ª•:**\n\n**Ng∆∞·ªùi d√πng:** "T√¥i mu·ªën h·ªçc l·∫≠p tr√¨nh t·ª´ con s·ªë 0 th√¨ c√≥ kh√≥a n√†o ph√π h·ª£p kh√¥ng?"\n\n**D·ªØ li·ªáu t·ª´ database (v√≠ d·ª•):**\n\n```json\n[\n  {\n    "id": 1,\n    "name": "Nh·∫≠p m√¥n l·∫≠p tr√¨nh Python cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu",\n    "description": "Kh√≥a h·ªçc l√Ω t∆∞·ªüng cho nh·ªØng ai ch∆∞a t·ª´ng c√≥ kinh nghi·ªám l·∫≠p tr√¨nh, gi√∫p b·∫°n l√†m quen v·ªõi Python v√† c√°c kh√°i ni·ªám c∆° b·∫£n.",\n    "level": "Beginner"\n  },\n  {\n    "id": 2,\n    "name": "L·∫≠p tr√¨nh web c∆° b·∫£n v·ªõi HTML, CSS, JavaScript",\n    "description": "D√†nh cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu mu·ªën x√¢y d·ª±ng trang web ƒë∆°n gi·∫£n.",\n    "level": "Beginner"\n  }\n]\n```\n\n**Ph·∫£n h·ªìi JSON:**\n\n```json\n{\n  "message": "Ch√†o b·∫°n! Tuy·ªát v·ªùi khi b·∫°n mu·ªën b·∫Øt ƒë·∫ßu h√†nh tr√¨nh l·∫≠p tr√¨nh. V·ªõi ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu, m√¨nh g·ª£i √Ω b·∫°n kh√≥a \'Nh·∫≠p m√¥n l·∫≠p tr√¨nh Python cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu\' s·∫Ω r·∫•t ph√π h·ª£p ƒë√≥. Python l√† m·ªôt ng√¥n ng·ªØ d·ªÖ h·ªçc v√† r·∫•t ph·ªï bi·∫øn. Ngo√†i ra kh√≥a \'L·∫≠p tr√¨nh web c∆° b·∫£n v·ªõi HTML, CSS, JavaScript\' c≈©ng l√† m·ªôt l·ª±a ch·ªçn tuy·ªát v·ªùi n·∫øu b·∫°n th√≠ch l√†m web nh√©! Ch√∫c b·∫°n h·ªçc th·∫≠t t·ªët!",\n  "url": ["http://localhost:3000/dashboard/courses/1", "http://localhost:3000/dashboard/courses/2"]\n}\n```\n\n**Ng∆∞·ªùi d√πng:** "C·∫£m ∆°n b·∫°n!"\n\n**Ph·∫£n h·ªìi JSON:**\n\n```json\n{\n  "message": "Kh√¥ng c√≥ g√¨ ·∫°! ƒê∆∞·ª£c gi√∫p b·∫°n h·ªçc l√† ni·ªÅm vui c·ªßa m√¨nh. ƒê·ª´ng ng·∫ßn ng·∫°i h·ªèi th√™m n·∫øu b·∫°n c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o nh√©!",\n  "url": []\n}\n```\n\n**Ng∆∞·ªùi d√πng:** "H√¥m nay th·ªùi ti·∫øt th·∫ø n√†o?"\n\n**Ph·∫£n h·ªìi JSON:**\n\n```json\n{\n  "message": "Xin l·ªói, c√¢u h·ªèi n√†y n·∫±m ngo√†i ph·∫°m vi ki·∫øn th·ª©c c·ªßa m√¨nh. M√¨nh chuy√™n v·ªÅ t∆∞ v·∫•n c√°c kh√≥a h·ªçc th√¥i ·∫°. :(",\n  "url": []\n}\n```\n\n**T√≥m l·∫°i:**\n\n1.  T√¥i s·∫Ω nh·∫≠n c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng.\n2.  T√¥i s·∫Ω s·ª≠ d·ª•ng d·ªØ li·ªáu b·∫°n cung c·∫•p (d·ªØ li·ªáu kh√≥a h·ªçc) ƒë·ªÉ t√¨m kh√≥a h·ªçc ph√π h·ª£p nh·∫•t.\n3.  T√¥i s·∫Ω t·∫°o m·ªôt JSON response theo c·∫•u tr√∫c ƒë√£ ƒë·ªãnh.\n4.  T√¥i s·∫Ω tr·∫£ v·ªÅ JSON response ƒë√≥.\n\nB·∫°n c√≥ th·ªÉ cung c·∫•p m·ªôt v√≠ d·ª• v·ªÅ c√°ch b·∫°n s·∫Ω cung c·∫•p d·ªØ li·ªáu kh√≥a h·ªçc cho t√¥i kh√¥ng? ƒêi·ªÅu n√†y s·∫Ω gi√∫p t√¥i hi·ªÉu r√µ h∆°n v·ªÅ c·∫•u tr√∫c d·ªØ li·ªáu v√† c√°ch t√¥i s·∫Ω truy c·∫≠p n√≥.\n'
              }
            ]
          }
        ]
      })

      const result = await chatSession.sendMessage(userMessage)
      const responseText = result.response.text()

      // Log the raw response for debugging
      console.log('üöÄ ~ fetchAIResponse ~ responseText:', responseText)

      // Clean the response to remove unwanted characters and the closing ```
      const cleanedResponseText = responseText
        .replace(/.*?```json/, '') // Remove everything before the JSON
        .replace(/```.*$/, '') // Remove the closing ```
        .replace(/```/g, '') // Remove any remaining ```
        .trim() // Trim whitespace

      console.log('üöÄ ~ fetchAIResponse ~ cleanedResponseText:', cleanedResponseText)

      // Check if the response is JSON
      let botReply
      try {
        botReply = JSON.parse(cleanedResponseText)
      } catch (e) {
        botReply = { message: cleanedResponseText, url: [] }
      }

      console.log('botReply:', botReply)

      // C·∫≠p nh·∫≠t tin nh·∫Øn v·ªõi URL t·ª´ ph·∫£n h·ªìi
      setMessages((prev) => [...prev.slice(0, -1), { id: Date.now() + 1, sender: 'bot', text: '', data: botReply.url }])

      await typeMessage(botReply.message)

      setMessages((prev) => [
        ...prev.slice(0, -1),
        { id: Date.now() + 1, sender: 'bot', text: botReply.message, data: botReply.url }
      ])
    } catch (error) {
      console.error('Error calling Gemini API:', error)
    } finally {
      setIsLoading(false)
      setDisplayText('')
      setIsRendering(false)
    }
  }

  // Send message and get response from Gemini
  const handleSendMessage = () => {
    if (!input.trim()) return
    if (isRendering) {
      setIsRendering(false)
      return
    }
    fetchAIResponse(input)
    setInput('')
  }

  // Add the provided JSON response to the messages
  const addProvidedResponse = () => {
    const providedResponse = {
      message: 'B·∫°n c·∫ßn gi√∫p g√¨?',
      data: []
    }

    setMessages((prev) => [
      ...prev,
      { id: Date.now() + 2, sender: 'bot', text: providedResponse.message, data: providedResponse.data }
    ])
  }

  // Call this function to add the provided response
  useEffect(() => {
    if (isOpen) {
      addProvidedResponse()
    }
  }, [isOpen]) // Ch·ªâ g·ªçi khi isOpen thay ƒë·ªïi

  // Scroll to bottom when new message is added
  useEffect(() => {
    lastMessageRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages, displayText])

  return (
    <div className='fixed bottom-4 right-4 z-50'>
      <AnimatePresence mode='wait'>
        {isOpen ? (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 20 }}
            transition={{ type: 'spring', stiffness: 200, damping: 20 }}
            className='flex h-[500px] w-[380px] flex-col overflow-hidden rounded-md border bg-white shadow-lg dark:bg-gray-900'
          >
            {/* Chatbox Header */}
            <div className='relative border-b bg-primary/10 p-3 backdrop-blur-md dark:bg-gray-800'>
              <h2 className='text-center text-sm font-medium text-gray-900 dark:text-white'>Tr·ª£ l√Ω ·∫£o - ELearn ‚ú®</h2>
              <motion.button
                className='absolute right-2 top-1/2 -translate-y-1/2 rounded-full p-1 text-gray-600 hover:bg-gray-200 dark:text-white dark:hover:bg-gray-700'
                onClick={() => setIsOpen(false)}
              >
                <X className='h-4 w-4' />
              </motion.button>
            </div>

            {/* Display Messages */}
            <ScrollArea className='h-[350px] flex-grow px-4 pt-4'>
              <div ref={scrollRef} className='flex flex-col space-y-4'>
                {messages.map((message, index) => (
                  <motion.div
                    key={message.id}
                    ref={index === messages.length - 1 ? lastMessageRef : null}
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ type: 'spring', stiffness: 300, damping: 30 }}
                    className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                  >
                    <div className='flex items-end gap-2 max-w-[75%]'>
                      {/* Avatar */}
                      <Avatar className='h-8 w-8'>
                        {message.sender === 'user' ? (
                          <AvatarImage src='https://imgv3.fotor.com/images/side/Anime-characters.jpg' alt='User' />
                        ) : (
                          <AvatarImage
                            src='https://png.pngtree.com/png-clipart/20230424/original/pngtree-beautiful-ai-avatar-robotic-humanoid-png-image_9093847.png'
                            alt='ELearn'
                          />
                        )}
                        <AvatarFallback>{message.sender === 'user' ? 'U' : 'AI'}</AvatarFallback>
                      </Avatar>

                      {/* Message Content */}
                      <motion.div
                        className={`rounded-lg px-3 py-2 text-sm max-w-full break-words ${
                          message.sender === 'user'
                            ? 'bg-blue-500 text-white'
                            : 'bg-gray-200 dark:bg-gray-700 dark:text-white'
                        }`}
                      >
                        {message.text === 'ƒê·ª£i t√¥i ch√∫t...' ? (
                          <div className='flex items-center'>
                            ƒê·ª£i t√¥i ch√∫t
                            <motion.span
                              className='ml-1'
                              initial={{ opacity: 0 }}
                              animate={{ opacity: 1 }}
                              transition={{ duration: 0.5, repeat: Infinity, repeatType: 'reverse', delay: 0.5 }}
                            >
                              .
                            </motion.span>
                            <motion.span
                              className='ml-1'
                              initial={{ opacity: 0 }}
                              animate={{ opacity: 1 }}
                              transition={{ duration: 0.5, repeat: Infinity, repeatType: 'reverse', delay: 1 }}
                            >
                              .
                            </motion.span>
                            <motion.span
                              className='ml-1'
                              initial={{ opacity: 0 }}
                              animate={{ opacity: 1 }}
                              transition={{ duration: 0.5, repeat: Infinity, repeatType: 'reverse', delay: 1.5 }}
                            >
                              .
                            </motion.span>
                          </div>
                        ) : (
                          <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.5 }}>
                            {index === messages.length - 1 && message.sender === 'bot' && displayText
                              ? displayText
                              : message.text}
                          </motion.div>
                        )}

                        {/* Display Course Suggestions */}
                        {message.sender === 'bot' && message.data && message.data.length > 0 && (
                          <div className='mt-3 space-y-2'>
                            <h3 className='text-sm font-semibold text-gray-700 dark:text-gray-300'>G·ª£i √Ω kh√≥a h·ªçc:</h3>
                            {message.data.map((course) => {
                              console.log('üöÄ ~ {message.data.map ~ course:', course)
                              return (
                                <a
                                  key={(course as any) + randomUUID}
                                  href={course as any}
                                  target='_blank'
                                  className='block rounded-md border p-2 text-sm transition hover:bg-gray-100 dark:border-gray-600 dark:hover:bg-gray-800'
                                >
                                  <strong>Link kh√≥a h·ªçc</strong>)
                                </a>
                              )
                            })}
                          </div>
                        )}
                      </motion.div>
                    </div>
                  </motion.div>
                ))}
              </div>
            </ScrollArea>

            {/* Input Message */}
            <motion.div className='border-t bg-gray-100 p-3 dark:bg-gray-800'>
              <div className='flex items-center gap-2'>
                <Input
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  placeholder='Nh·∫≠p tin nh·∫Øn...'
                  className='flex-grow bg-white text-sm placeholder:text-gray-400 dark:bg-gray-700 dark:text-white'
                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                />
                <Button
                  onClick={handleSendMessage}
                  size='icon'
                  variant={isRendering ? 'destructive' : 'ghost'}
                  disabled={isLoading}
                >
                  {isRendering ? <CircleStop className='h-4 w-4' /> : isLoading ? '‚è≥' : <Send className='h-4 w-4' />}
                </Button>
              </div>
            </motion.div>
          </motion.div>
        ) : (
          <motion.div initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }}>
            <Button
              size='icon'
              className='rounded-full bg-blue-500 text-white shadow-lg hover:bg-blue-600'
              onClick={() => setIsOpen(true)}
            >
              <MessageCircle className='h-5 w-5' />
            </Button>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  )
}
